language: python

# Here we use anaconda for 2.6 and 3.4, since it provides the simplest
# interface for running different versions of Python. We could also use
# it for 2.7, but the Ubuntu system has installable 2.7 Qt4-GL, which
# allows for more complete testing.


virtualenv:
    system_site_packages: true


env:
    # Enable python 2 and python 3 builds
    # Note that the 2.6 build doesn't get flake8, and runs old versions of
    # Pyglet and GLFW to make sure we deal with those correctly
    - PYTHON=2.6 DEPS=full TEST=standard  # functionality
    - PYTHON=2.7 DEPS=full TEST=standard
    - PYTHON=2.7 DEPS=minimal TEST=standard
    - PYTHON=3.4 DEPS=full TEST=standard

    - PYTHON=2.7 DEPS=full TEST=examples  # test examples
    - PYTHON=3.4 DEPS=full TEST=examples

    - PYTHON=3.4 DEPS=minimal TEST=extra  # test file sizes, style, line endings


before_install:
    - REDIRECT_TO=/dev/stdout  # change to /dev/null to silence Travis
    - travis_retry sudo apt-get -qq update;
    - if [ "${PYTHON}" != "2.7" ]; then
        wget -q http://repo.continuum.io/miniconda/Miniconda-3.6.0-Linux-x86_64.sh -O miniconda.sh;
        chmod +x miniconda.sh;
        ./miniconda.sh -b -p ~/anaconda &> ${REDIRECT_TO};
        export PATH=~/anaconda/bin:$PATH;
        conda update --yes --quiet conda &> ${REDIRECT_TO};
        travis_retry sudo apt-get -qq -y install libgl1-mesa-dri;
      fi;

    - SRC_DIR=$(pwd)
    # file size checks
    - if [ "${TEST}" == "extra" ]; then
        if [ "${TRAVIS_PULL_REQUEST}" != "false" ]; then
          GIT_TARGET_EXTRA="+refs/heads/${TRAVIS_BRANCH}";
          GIT_SOURCE_EXTRA="+refs/pull/${TRAVIS_PULL_REQUEST}/merge";
        else
          GIT_TARGET_EXTRA="";
          GIT_SOURCE_EXTRA="";
        fi;
        cd ~;
        mkdir target-size-clone && cd target-size-clone;
        git init &> ${REDIRECT_TO} && git remote add -t ${TRAVIS_BRANCH} origin git://github.com/${TRAVIS_REPO_SLUG}.git &>${REDIRECT_TO};
        git fetch origin ${GIT_TARGET_EXTRA} &> ${REDIRECT_TO} && git checkout -qf FETCH_HEAD &> ${REDIRECT_TO} && cd ..;
        TARGET_SIZE=`du -s target-size-clone | sed -e "s/\t.*//"`;
        mkdir source-size-clone && cd source-size-clone;
        git init &> ${REDIRECT_TO} && git remote add -t ${TRAVIS_BRANCH} origin git://github.com/${TRAVIS_REPO_SLUG}.git &> ${REDIRECT_TO};
        git fetch origin ${GIT_SOURCE_EXTRA} &> ${REDIRECT_TO} && git checkout -qf FETCH_HEAD &> ${REDIRECT_TO} && cd ..;
        SOURCE_SIZE=`du -s source-size-clone | sed -e "s/\t.*//"`;
        if [ "${SOURCE_SIZE}" != "${TARGET_SIZE}" ]; then
          SIZE_DIFF=`expr ${SOURCE_SIZE} - ${TARGET_SIZE}`;
        else
          SIZE_DIFF=0;
        fi;
      fi;


install:
    # Install numpy, nose, flake
    - if [ "${PYTHON}" != "2.7" ]; then
        conda create -n testenv --yes --quiet pip python=$PYTHON > ${REDIRECT_TO};
        source activate testenv > ${REDIRECT_TO};
        conda install --yes --quiet numpy nose > ${REDIRECT_TO};
      else
        travis_retry sudo apt-get -qq -y install python-numpy python-nose python-setuptools > ${REDIRECT_TO};
      fi;
    - pip install -q coveralls nose-timer
    # Dont install flake8 on 2.6 to make sure tests still run without it
    - if [ "${PYTHON}" != "2.6" ]; then
        pip install -q flake8;
      else
        pip install -q unittest2;
      fi
    # helpful for debugging faults
    - if [ "${PYTHON}" != 3.4 ]; then
        pip install -q nose-faulthandler;
      fi

    # Install PyOpenGL
    - if [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq -y install freeglut3 > ${REDIRECT_TO};
        if [ "${PYTHON}" == "2.7" ]; then
          echo "Using OpenGL stable version (repos)";
          travis_retry sudo apt-get -qq -y install python-opengl > ${REDIRECT_TO};
        else
          echo "Using OpenGL stable version (pip)";
          pip install -q PyOpenGL;
        fi;
      fi;

    # Use Pyglet alpha to get Py3.4 support
    # Also install PyQt4, imaging (PIL or pillow), scipy, mpl, egl
    # Test old (insufficient) version of Pyglet on 2.6
    # On conda, can't install pyside-pyzo b/c it conflicts with pyqt4,
    # which is required by matplotlib :(
    # No wx on py3k, wxpython doesn't work there (!)
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" == "2.6" ]; then
          pip install -q pyglet;
          conda install --yes --quiet wxpython > ${REDIRECT_TO};
        else
          pip install -q http://pyglet.googlecode.com/archive/tip.zip;
        fi;
        if [ "${PYTHON}" == "3.4" ]; then
          conda install --yes --quiet pillow scipy matplotlib > ${REDIRECT_TO};
        fi;
        if [ "${PYTHON}" == "2.7" ]; then
          travis_retry sudo apt-get -qq -y install python-qt4-gl python-imaging python-scipy python-matplotlib python-wxgtk2.8 > ${REDIRECT_TO};
        fi;
        travis_retry sudo apt-get -qq -y install libegl1-mesa;
      fi;

    # Install vispy
    - cd ${SRC_DIR}
    - python setup.py install > ${REDIRECT_TO}
    - cd ~

    # GLFW: version 2 shouldn't work (so let's try on Py2.6), version 3 will
    - if [ "${PYTHON}" == "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install libglfw2 > ${REDIRECT_TO};
      fi
    - if [ "${PYTHON}" != "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install xorg-dev libglu1-mesa-dev > ${REDIRECT_TO};
        git clone git://github.com/glfw/glfw.git &> ${REDIRECT_TO};
        cd glfw;
        cmake -DBUILD_SHARED_LIBS=true -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false . > ${REDIRECT_TO};
        sudo make install > ${REDIRECT_TO};
      fi

    # Install SDL2 (on 2.6, let's only install sdl2-python to test handling)
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" != "2.6" ]; then
          cd ~;
          travis_retry sudo apt-get -qq -y install mercurial libdbus-1-dev libgl1-mesa-dev libglu1-mesa-dev libpulse-dev libx11-dev libxcursor-dev libxext-dev libxi-dev libxinerama-dev libxrandr-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libasound2-dev libts-dev libudev-dev > ${REDIRECT_TO};
          wget -q http://www.libsdl.org/release/SDL2-2.0.3.tar.gz;
          tar xzf SDL2-2.0.3.tar.gz &> ${REDIRECT_TO};
          cd SDL2-2.0.3;
          mkdir build;
          cd build;
          ../configure --disable-audio --disable-render --disable-joystick --disable-haptic --disable-power --disable-cpuinfo &> ${REDIRECT_TO};
          make -j 2 &> ${REDIRECT_TO};
          sudo make install &> ${REDIRECT_TO};
        fi;
        pip install -q PySDL2;
      fi;

    # after manual builds we need to update .so search
    - sudo ldconfig


before_script:
    # We need to create a (fake) display on Travis, let's use a funny resolution
    - export DISPLAY=:99.0
    - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render


script:
    - cd ${SRC_DIR}
    - if [ "${TEST}" == "standard" ]; then
        make nose;
      fi;
    - if [ "${TEST}" == "examples" ] || [ "${DEPS}" == "minimal" ]; then
        make examples;
      fi;
    - if [ "${TEST}" == "extra" ]; then
        make extra;
      fi;
    # Each line must be run in a separate line to ensure exit code accuracy
    - if [ "${TEST}" == "extra" ]; then
        echo "Size difference ${SIZE_DIFF} kB";
        test ${SIZE_DIFF} -lt 100;
      fi;


after_success:
    # Need to run from source dir to execute appropriate "git" commands
    - if [ "${TEST}" == "standard" ]; then
        coveralls;
      fi;
